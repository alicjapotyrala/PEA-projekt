#include "stdafx.h"
#include "Populacja.h"
#include "Macierz.h"

using namespace std;



void Populacja::permutacja( double**& macierz, vector<vector<int>>& drogi, int wielkosc, int miasta){

	for (int i = 0; i < wielkosc; i++){
		int*perm = new int[miasta];
		for (int c = 0; c < miasta; c++)
		{
			bool sprawdz;
			int losowe;
			do{
				losowe = rand() % miasta; //losuje jedno miasto
				sprawdz = true;
				for (int j = 0; j < c; j++){
					if (losowe == perm[j]){
						sprawdz = false;
						break;
					}
				}

			} while (!sprawdz);
			perm[c] = losowe;
		}

		for (int j = 0; j < miasta; j++){
			drogi[i][j]=perm[j];
		}
		delete[]perm;
	}

	
			}



double Populacja::droga(double **&macierz, int miasta, vector<int>& perm){
	double koszt = 0;

	for (int i = 0; i < miasta - 1; i++)
	{

		koszt += macierz[perm[i]][perm[i + 1]];

	}

	koszt += macierz[perm[miasta - 1]][perm[0]];//droga od ostatniego do pierwszego miasta

	return koszt;
}

double Populacja::ewoluuj(double**& macierz, int wielkosc, int miasta){
	//int** populacja;


	std::vector<vector<int>> populacja(wielkosc, std::vector<int>(miasta));
	/*populacja = new int*[wielkosc];
	for (int a = 0; a < wielkosc; a++){
		populacja[a] = new int[miasta];
	}*/

	//tworze populacje skladajaca sie z wielkosc losowych drog
	//permutacja(macierz, populacja, wielkosc, miasta);
	//for (int i = 0; i < wielkosc; i++){
	//	cout << i + 1 << ". ";
	//	for (int j = 0; j < miasta; j++){
	//		cout << populacja[i][j] << " ";
	//	}
	//	//cout << droga(macierz, miasta, populacja[i]);
	//	cout << endl;
	//}


	//krzyzuje osobniki i powstale w wyniku krzyzowki dzieci wpisuje kolejno do populacji
	for (int i = 0; i < wielkosc; i++){
		vector<int> rodzic1(miasta);
		vector<int> rodzic2(miasta);

		vector<int> dziecko(miasta);

		rodzic1 = selekcjaTurniejowa(macierz, wielkosc, miasta, populacja,5);

		rodzic2 = selekcjaTurniejowa(macierz, wielkosc, miasta, populacja,5);

		dziecko = krzyzowka(miasta, rodzic1, rodzic2);

		for (int j = 0; j < miasta; j++){

			populacja[i][j] = dziecko[j];

		}

		


	}

	
	//mutacja populacji dla otrzymania nowego "materialu genetycznego"
	for (int i = 0; i < wielkosc; i++){
		mutacja(macierz, wielkosc, miasta, populacja[i]);
	}
	/*cout << "po mutacji" << endl;
	for (int i = 0; i < wielkosc; i++){
	cout << i + 1 << ". ";
	for (int j = 0; j < miasta; j++){
	cout << populacja[i][j] << " ";
	}
	cout << droga(macierz, miasta, populacja[i]);
	cout << endl;
	}*/
	vector<int> najlepsza(miasta);
	najlepsza = znajdzNajlepsza(macierz, miasta, wielkosc, populacja);
	double najlepsza_droga = droga(macierz, miasta, najlepsza);

	//cout << "najlepsza znaleziona droga: ";
	//cout << najlepsza_droga;
	
	return najlepsza_droga;

	/*for (int i = 0; i < wielkosc; i++){
		delete[]populacja[i];
	}
	delete[]populacja;*/
	//delete[]najlepsza;

}

vector<int> Populacja::znajdzNajlepsza(double **&macierz, int miasta, int wielkosc, vector<vector<int>>& drogi){
	vector<int> najlepsza(miasta);
	int index;
	for (int i = 0; i < miasta; i++){
		najlepsza[i]= drogi[0][i];
	}
	for (int i = 0; i < wielkosc; i++){
		
			if (droga(macierz, miasta, najlepsza)> droga(macierz, miasta, drogi[i])){
				//delete[]najlepsza;
				//najlepsza = new int[miasta];
				najlepsza = drogi[i];
				index = i;
			}
		
	}
	
	return najlepsza;
	
}

vector<int> Populacja::selekcjaTurniejowa(double **&macierz, int wielkosc, int miasta, vector<vector<int>>& drogi, int wielkosc_tur){
	int rand_id=0;

	vector<int> drogaa(miasta);
	vector<vector<int>> drogi1(wielkosc_tur, std::vector<int>(miasta));
	/*int** drogi1;
	drogi1 = new int *[wielkosc_tur];

	for (int a = 0; a < wielkosc_tur; ++a){
 		drogi1[a] = new int[miasta];
	}
	*/

	for (int i = 0; i < wielkosc_tur; i++){
	    rand_id = rand() % wielkosc;
		for (int j = 0; j < miasta; j++){
			drogi1[i][j] = drogi[rand_id][j];
		}
	}


	drogaa= znajdzNajlepsza(macierz, miasta, wielkosc_tur, drogi1);
	return drogaa;
	//delete[] drogaa;

	/*for (int i = 0; i < wielkosc_tur; ++i){
		delete[] drogi1[i];
	}
	delete[]drogi1;*/
}

vector<int> Populacja::krzyzowka( int miasta,vector<int>& rodzic1, vector<int>& rodzic2){
		int  *pozycja = new int[miasta];
		bool *id_miasta = new bool[miasta];
		int start;
		int end;
		start = rand() % miasta;
		end = rand() % miasta;

		for (int i = 0; i < miasta; i++) {

			id_miasta[i] = false;

			if (start < end && (i > start && i < end))
				pozycja[i] = rodzic1[i];
			else if (start > end && (i > start || i < end))
				pozycja[i] = rodzic1[i];
			else
				pozycja[i] = rodzic2[i];
		}

		vector<int>dziecko(miasta);
		for (int i = 0; i < miasta; i++) {
			if (!id_miasta[pozycja[i]]) {
				dziecko[i] = pozycja[i];
				id_miasta[pozycja[i]] = true;
			}
			else {
				for (int j = 0; j < miasta; j++) {
					int index = rodzic2[j];
					if (!id_miasta[index]) {
						dziecko[i] = index;
						id_miasta[index] = true;
						break;
					}
				}
			}
		}
		/*for (int i = 0; i<miasta; i++){
			cout << dziecko[i] << " ";
		}
		cout << endl;*/

		return dziecko;
		//delete[]dziecko;
		delete[]pozycja;
		delete[]id_miasta;
	
}

void Populacja::mutacja(double **&macierz, int wielkosc, int miasta, vector<int>& droga){
	int temp;
	for (int i = 0; i < miasta; i++){

		if (((double)rand() / (RAND_MAX)) < 0.015){

			int j = rand() % miasta;
			temp = droga[i];
			droga[i] = droga[j];
			droga[j]=temp;
			

		}
	}
}

